heat_template_version: 2015-10-15

description: >
  An example Heat Orchestration Template (HOT).
  WordPress is web software you can use to create a beautiful website
  or blog. This template installs two instances: one running a
  WordPress deployment and the other using a local MySQL database to
  store the data.
  This template create a firewall server and a network behind it.
  Then, scalable WordPress servers will be created behind a load balancer,
  which uses HAProxy. The WordPress servers will be backed by a MariaDB server.

parameters:

  key_name:
    type: string
    description: Name of a KeyPair to enable SSH access to the instance

  instance_type:
    type: string
    description: Instance type for web and DB servers
    default: m1.small
    constraints:
      - allowed_values: [m1.tiny, m1.small, m1.medium, m1.medium.lxd, m1.large, m1.xlarge]
        description: instance_type must be a valid instance type

  image_id:
    type: string
    description: >
      Name or ID of the image to use for the MariaSQL server.
    default: ubuntu 16.04

  db_name:
    type: string
    description: WordPress database name
    default: wordpress
    constraints:
      - length: { min: 1, max: 64 }
        description: db_name must be between 1 and 64 characters
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: >
          db_name must begin with a letter and contain only alphanumeric
          characters

  db_username:
    type: string
    description: The WordPress database admin account username
    default: admin
    hidden: true
    constraints:
      - length: { min: 1, max: 16 }
        description: db_username must be between 1 and 16 characters
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: >
          db_username must begin with a letter and contain only alphanumeric
          characters

  db_password:
    type: string
    description: The WordPress database admin account password
    default: admin
    hidden: true
    constraints:
      - length: { min: 1, max: 41 }
        description: db_password must be between 1 and 41 characters
      - allowed_pattern: '[a-zA-Z0-9]*'
        description: db_password must contain only alphanumeric characters

  db_root_password:
    type: string
    description: Root password for MySQL
    default: admin
    hidden: true
    constraints:
      - length: { min: 1, max: 41 }
        description: db_root_password must be between 1 and 41 characters
      - allowed_pattern: '[a-zA-Z0-9]*'
        description: db_root_password must contain only alphanumeric characters

  public_net_id:
      type: string
      description: ID of public network for which floating IP addresses will be allocated

  private_net_id:
      type: string
      description: ID of private network into which servers get deployed

  private_subnet_id:
      type: string
      description: ID of private sub network into which servers get deployed

  webserver_count:
      type: number
      description: Count of Apache/WordPress web server instances
      default: 3

  secure_net_name:
    type: string
    description: Name of private network to be created
  secure_net_cidr:
    type: string
    description: Private network address (CIDR notation)
  secure_net_gateway:
    type: string
    description: Private network gateway address
  secure_net_pool_start:
    type: string
    description: Start of private network IP address allocation pool
  secure_net_pool_end:
    type: string
    description: End of private network IP address allocation pool

resources:
  firewall_server:
    type: OS::Nova::Server
    properties:      
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      networks:
        - port:
            get_resource: firewall_server_port_external
        - port:
            get_resource: firewall_server_port_internal
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v

            tee -a /etc/default/locale <<EOF
            LANGUAGE="en_US.UTF8"
            LC_ALL="en_US.UTF8"
            LC_CTYPE="en_US.UTF8"
            EOF
            export LANGUAGE="en_US.UTF8"
            export LC_ALL="en_US.UTF8"
            export LC_CTYPE="en_US.UTF8"

            apt-get update
            apt-get -y upgrade

            apt-get -y install ipcalc
            broadcast=`ipcalc -b secure_net_cidr_addr | grep Broadcast | awk '{print $2}'`
            netmask=`ipcalc -b secure_net_cidr_addr | grep Netmask | awk '{print $2}'`
            network=`ipcalc -b secure_net_cidr_addr | grep Network | awk '{print $2}' | cut -f1 -d"/"`

            ext_interface=`ip link | grep "^2: " | awk '{print $2}' | cut -d : -f 1`
            int_interface=`ip link | grep "^3: " | awk '{print $2}' | cut -d : -f 1`
            tee -a /etc/network/interfaces <<EOF
            auto $int_interface
            iface $int_interface inet static
              address gateway_addr
              netmask $netmask
              network $network
              broadcast $broadcast
            EOF
            ifup $int_interface

            echo net.ipv4.ip_forward=1 >> /etc/sysctl.conf
            sysctl -w net.ipv4.ip_forward=1

            iptables -t nat -A POSTROUTING -o $ext_interface -j MASQUERADE
            iptables -A FORWARD -i $ext_interface -o $int_interface -m state --state RELATED,ESTABLISHED -j ACCEPT
            iptables -A FORWARD -i $int_interface -o $ext_interface -j ACCEPT

            # Firewall DNATs HTTP connections
            iptables -t nat -A PREROUTING -p tcp -i $ext_interface -d gateway_external_addr --dport 80 -j DNAT --to loadbalancer_addr:80

            apt-get -y install netfilter-persistent
            netfilter-persistent save

            wc_notify --data-binary '{"status": "SUCCESS"}' #'
          params:
            gateway_addr: { get_param: secure_net_gateway }
            secure_net_cidr_addr: { get_param: secure_net_cidr }
            gateway_external_addr: { get_attr: [firewall_server_port_external, fixed_ips, 0, ip_address] }
            loadbalancer_addr: { get_attr: [LoadBalancerServer_port, fixed_ips, 0, ip_address] }
            wc_notify: { get_attr: ['firewall_wait_handle', 'curl_cli'] }

  firewall_wait: 
    type: "OS::Heat::WaitCondition"
    properties: 
      handle: 
        get_resource: firewall_wait_handle
      timeout: 1000

  firewall_wait_handle: 
    type: "OS::Heat::WaitConditionHandle"      

  firewall_server_port_external:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net_id }
      fixed_ips:
        - subnet_id: { get_param: private_subnet_id }
      security_groups: [ { get_resource: WebServer_security_group } ]

  firewall_server_port_internal:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: secure_net }
      allowed_address_pairs: [{"ip_address": "0.0.0.0/0"}]
      fixed_ips:
        - ip_address: { get_param: secure_net_gateway }

  secure_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: secure_net_name }

  secure_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: secure_net }
      cidr: { get_param: secure_net_cidr }
      dns_nameservers: ["8.8.8.8", "8.8.4.4"]
      gateway_ip: { get_param: secure_net_gateway }
      allocation_pools:
        - start: { get_param: secure_net_pool_start }
          end: { get_param: secure_net_pool_end }

  firewall_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net_id }
      port_id: { get_resource: firewall_server_port_external }

  LoadBalancerServer:
    type: OS::Nova::Server
    depends_on: webserver_wait
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      networks:
          - port: { get_resource: LoadBalancerServer_port }
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v

            tee -a /etc/default/locale <<EOF
            LANGUAGE="en_US.UTF8"
            LC_ALL="en_US.UTF8"
            LC_CTYPE="en_US.UTF8"
            EOF

            export LANGUAGE="en_US.UTF8"
            export LC_ALL="en_US.UTF8"
            export LC_CTYPE="en_US.UTF8"

            apt-get update
            apt-get -y upgrade

            ## Installing Docker & Docker Compose

            apt-get -y install docker.io
            apt-get -y remove apparmor apparmor-utils

            curl -L "https://github.com/docker/compose/releases/download/1.8.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

            mkdir ~/my-haproxy
            tee -a ~/haproxy.cfg <<EOF
            listen webserver
              bind 0.0.0.0:80
              mode http
              stats enable
              stats uri /haproxy?stats
              balance roundrobin
              option httpclose
              option forwardfor
            EOF

            n=1
            for web_ip in web_ipaddr
            do
              echo "  server apache$n $web_ip check" >> /etc/haproxy/haproxy.cfg
              n=$(( $n + 1 ))
            done

            tee -a ~/my-haproxy/Dockerfile <<EOF
            FROM haproxy
            COPY haproxy.cfg /usr/local/etc/haproxy/haproxy.cfg
            EOF

            cd ~/my-haproxy
            docker build -t my-haproxy .

            ## Writing docker-compose.yml

            docker_compose_dir=docker-compose
            mkdir -p ~/${docker_compose_dir}
            tee -a ~/${docker_compose_dir}/docker-compose.yml <<EOF > /dev/null
            version: '2'

            services:
               haproxy:
                 image: my-haproxy
                 ports:
                   - "80:80"
                 restart: always
                 environment:

            EOF

            cd ~/${docker_compose_dir}; docker-compose up -d
            wc_notify --data-binary '{"status": "SUCCESS"}' #'
          params:
            wc_notify: { get_attr: ['lbserver_wait_handle', 'curl_cli'] }
            web_ipaddr: { list_join: [' ', get_attr: [WebServerGroup, server_ip]] }

  lbserver_wait: 
    type: "OS::Heat::WaitCondition"
    properties: 
      handle: 
        get_resource: lbserver_wait_handle
      timeout: 1000

  lbserver_wait_handle: 
    type: "OS::Heat::WaitConditionHandle"      

  LoadBalancerServer_port:
      type: OS::Neutron::Port
      properties:
          network_id : { get_resource: secure_net }
          allowed_address_pairs: [{"ip_address": "0.0.0.0/0"}]
          fixed_ips:
              - subnet_id: { get_resource: secure_subnet }
          security_groups: [ { get_resource: WebServer_security_group } ]

  DatabaseServer:
    type: OS::Nova::Server
    depends_on: firewall_wait
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      networks:
          - port: { get_resource: DatabaseServer_port }
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v

            tee -a /etc/default/locale <<EOF
            LANGUAGE="en_US.UTF8"
            LC_ALL="en_US.UTF8"
            LC_CTYPE="en_US.UTF8"
            EOF

            export LANGUAGE="en_US.UTF8"
            export LC_ALL="en_US.UTF8"
            export LC_CTYPE="en_US.UTF8"

            apt-get update
            apt-get -y upgrade

            ## Installing Docker & Docker Compose

            apt-get -y install docker.io
            apt-get -y remove apparmor apparmor-utils

            curl -L "https://github.com/docker/compose/releases/download/1.8.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

            ## Writing docker-compose.yml

            docker_compose_dir=docker-compose
            mkdir -p ~/${docker_compose_dir}
            tee -a ~/${docker_compose_dir}/docker-compose.yml <<EOF > /dev/null
            version: '2'

            services:
               db:
                 image: mysql:5.7
                 volumes:
                   - db_data:/var/lib/mysql
                 ports:
                   - "3306:3306"
                 restart: always
                 environment:
                   MYSQL_ROOT_PASSWORD: wordpress
                   MYSQL_DATABASE: wordpress
                   MYSQL_USER: wordpress
                   MYSQL_PASSWORD: wordpress
            volumes:
                db_data:

            EOF

            cd ~/${docker_compose_dir}; docker-compose up -d

          params:
            db_rootpassword: { get_param: db_root_password }
            db_name: { get_param: db_name }
            db_user: { get_param: db_username }
            db_password: { get_param: db_password }

  DatabaseServer_port:
      type: OS::Neutron::Port
      properties:
          network_id : { get_resource: secure_net }
          allowed_address_pairs: [{"ip_address": "0.0.0.0/0"}]
          fixed_ips:
              - subnet_id: { get_resource: secure_subnet }
          security_groups: [{get_resource: DatabaseServer_security_group }]

  DatabaseServer_security_group:
      type: OS::Neutron::SecurityGroup
      properties:
          description: Add security group rules for DatabaseServer
          name: security-group-db
          rules:
            - remote_ip_prefix: 0.0.0.0/0
              protocol: tcp
              port_range_min: 22
              port_range_max: 22
            - remote_ip_prefix: 0.0.0.0/0
              protocol: icmp
            - remote_ip_prefix: 0.0.0.0/0
              protocol: tcp
              port_range_min: 3306
              port_range_max: 3306


  WebServerGroup:
      type: OS::Heat::ResourceGroup
      depends_on: firewall_wait
      properties:
        count: { get_param: webserver_count }
        resource_def:
          type: http://210.125.84.51/wordpress-lamp.yaml
          properties:
            key_name: { get_param: key_name }
            instance_type: { get_param: instance_type }
            image_id: { get_param: image_id}
            public_net_id: { get_param: public_net_id }
            private_net_id: { get_resource: secure_net }
            private_subnet_id: { get_resource: secure_subnet }
            security_group: { get_resource: WebServer_security_group }
            user_data:
              str_replace:
                template: |
                  #!/bin/bash -v

                  tee -a /etc/default/locale <<EOF
                  LANGUAGE="en_US.UTF8"
                  LC_ALL="en_US.UTF8"
                  LC_CTYPE="en_US.UTF8"
                  EOF

                  export LANGUAGE="en_US.UTF8"
                  export LC_ALL="en_US.UTF8"
                  export LC_CTYPE="en_US.UTF8"

                  apt-get update
                  apt-get -y upgrade

                  ## Installing Docker & Docker Compose

                  apt-get -y install docker.io
                  apt-get -y remove apparmor apparmor-utils

                  curl -L "https://github.com/docker/compose/releases/download/1.8.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                  chmod +x /usr/local/bin/docker-compose

                  ## Writing docker-compose.yml

                  docker_compose_dir=docker-compose
                  mkdir -p ~/${docker_compose_dir}
                  tee -a ~/${docker_compose_dir}/docker-compose.yml <<EOF > /dev/null
                  version: '2'

                  services:
                     wordpress:
                       image: wordpress:latest
                       ports:
                         - "80:80"
                       restart: always
                       environment:
                         WORDPRESS_DB_HOST: db_ipaddr:3306
                         WORDPRESS_DB_PASSWORD: wordpress

                  EOF

                  cd ~/${docker_compose_dir}; docker-compose up -d

                  wc_notify --data-binary '{"status": "SUCCESS"}' #'
                params:
                  db_rootpassword: { get_param: db_root_password }
                  db_name: { get_param: db_name }
                  db_user: { get_param: db_username }
                  db_password: { get_param: db_password }
                  db_ipaddr: { get_attr: [DatabaseServer_port, fixed_ips, 0, ip_address] }
                  web_ipaddr: { get_attr: [firewall_floating_ip, floating_ip_address] }
                  wc_notify: { get_attr: ['webserver_wait_handle', 'curl_cli'] }

  webserver_wait: 
    type: "OS::Heat::WaitCondition"
    properties: 
      handle: 
        get_resource: webserver_wait_handle
      timeout: 1000
      count: { get_param: webserver_count }

  webserver_wait_handle: 
    type: "OS::Heat::WaitConditionHandle"      

  WebServer_security_group:
      type: OS::Neutron::SecurityGroup
      properties:
          description: Add security group rules for WebServer
          name: security-group-web
          rules:
            - remote_ip_prefix: 0.0.0.0/0
              protocol: tcp
              port_range_min: 22
              port_range_max: 22
            - remote_ip_prefix: 0.0.0.0/0
              protocol: icmp
            - remote_ip_prefix: 0.0.0.0/0
              protocol: tcp
              port_range_min: 80
              port_range_max: 80


outputs:
  WebsiteURL:
    description: URL for Wordpress
    value:
      str_replace:
        template: http://host/wordpress          
        params:
          host: { get_attr: [firewall_floating_ip, floating_ip_address] }
  HAProxyStatURL:
    description: URL for HAProxy Stat
    value:
      str_replace:
        template: http://host/haproxy?stats
        params:
          host: { get_attr: [firewall_floating_ip, floating_ip_address] }
